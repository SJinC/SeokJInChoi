{
  
    
        "post0": {
            "title": "파이썬 3월 14일 강의 복습",
            "content": "&#47532;&#49828;&#53944; - &#49440;&#50616;, &#50672;&#49328;, &#52968;&#53580;&#51060;&#45320;&#54805; &#44061;&#52404;, &#44032;&#48320;&#44061;&#52404;, &#47700;&#49548;&#46300;, &#51473;&#52393;&#47532;&#49828;&#53944;, &#47532;&#49828;&#53944; &#52980;&#54532;&#47532;&#54760;&#49496; . june 25 ,2022 | . list . 선언 . - 리스트의 선언 . a=[11,22] a . [11, 22] . type(a) . list . - 비어있는 리스트 선언 . a=[] # 방법 1 a . [] . a=list() #방법 2 a . [] . 연산 . - 더하기 연산 . a=[11,12] b=[12,13] . a+b . [11, 12, 12, 13] . 리스트에서 더하기 연산은 더하기 개념이 아니라 원소 추가의 개념 | . - 빼기 연산 (정의되지 않음) . a-b . TypeError Traceback (most recent call last) Input In [14], in &lt;cell line: 1&gt;() -&gt; 1 a-b TypeError: unsupported operand type(s) for -: &#39;list&#39; and &#39;list&#39; . - 곱하기 연산 . a*2 . [11, 12, 11, 12] . 리스트에서 곱하기 연산은 원소의 반복의 개념 | . - 나눗셈 연산 (정의되지 않음) . a/2 . TypeError Traceback (most recent call last) Input In [17], in &lt;cell line: 1&gt;() -&gt; 1 a/2 TypeError: unsupported operand type(s) for /: &#39;list&#39; and &#39;int&#39; . - 더하기와 곱하기는 원소의 추가와 반복추가를 의미하지만 그렇다고 해서 뺄셈과 나눗셈이 원소의 삭제를 의미하지는 않음 . - 더하기와 곱하기로 산술적인 +,* 을 계산하고 싶은경우에는 ??? . (예제) . a=[1,2] b=[3,4] . (풀이1) . a[0]+b[0] #a믜 첫번째 원소를 추출 , b의 첫번째 원소를 추출, 둘을 더함 (추출한 원소는 int형이므로 연산 가능!) . 4 . a[1]+b[1] #a믜 두번째 원소를 추출 , b의 두번째 원소를 추출, 둘을 더함 (추출한 원소는 int형이므로 연산 가능!) . 6 . (풀이2) . numpy 패키지 사용 (파이썬의 여러 수치연산들을 담당하는 라이브러리) . 패키지 설치 방법 . !pip install numpy#최신버전의 패키지를 설치 | !conda install -c conda-forge numpy -y #안전한 버전의 패키지를 설치 | . 설치된 패키지 사용 방법 . import numpy 한뒤에 numpy.?? 로 기능을 사용 | import numpy as np 한뒤에 np.?? 로 기능을 사용 | . import numpy as np #numpy를 불러오는데 np라는 이름으로 불러오겠다 . a=[1,2] b=[3,4] . aa=np.array(a) bb=np.array(b) # aa,bb는 리스트가 아니라 numpy array # numpy.array()는 numpy패키지에서 제공하는 array함수를 쓰겠다는 의미! # numpy -&gt; 상위개념 , array() -&gt; 하위개념 . aa+bb . array([4, 6]) . 2*aa . array([2, 4]) . 2*aa+1 . array([3, 5]) . 인덱싱 . - str형과 동일한 방식 . a=[11,22,33,44,55] a[-1:] . [55] . list &#44256;&#44553; . 컨테이너형 객체, 가변객체 . - list의 원소는 int, float 등만 가능한 것이 아니다. (리스트는 컨테이너형 객체 이므로) . lst=[1,3.14,True,&#39;a&#39;,[1,2],(1,2),{&#39;name&#39;:&#39;iu&#39;,&#39;age&#39;:27},{1,2,3}] . lst . [1, 3.14, True, &#39;a&#39;, [1, 2], (1, 2), {&#39;name&#39;: &#39;iu&#39;, &#39;age&#39;: 27}, {1, 2, 3}] . type(lst[0]),type(lst[1]),type(lst[2]),type(lst[3]),type(lst[4]),type(lst[5]),type(lst[6]),type(lst[7]) . (int, float, bool, str, list, tuple, dict, set) . - str은 컨테이너형이 아니다. . str의 모든원소는 문자임 | . &#39;abcd&#39;[2] . &#39;c&#39; . - 리스트의 원소는 수정할 수 있다. (리스트는 가변객체) . a=[11,22,33] a . [11, 22, 33] . a[0]=111 . a . [111, 22, 33] . (원소수정 가능) . a=[&#39;s&#39;,&#39;e&#39;,&#39;o&#39;,&#39;k&#39;,&#39;j&#39;,&#39;i&#39;,&#39;n&#39;] a . [&#39;s&#39;, &#39;e&#39;, &#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;] . a[0]=&#39;S&#39; . a . [&#39;S&#39;, &#39;e&#39;, &#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;] . (원소수정 불가능) . a=&#39;seokjin&#39; a . &#39;seokjin&#39; . a[0] . &#39;s&#39; . a[0]=&#39;S&#39; . TypeError Traceback (most recent call last) Input In [47], in &lt;cell line: 1&gt;() -&gt; 1 a[0]=&#39;S&#39; TypeError: &#39;str&#39; object does not support item assignment . - 리스트 원소 삭제 . (예제) . 문자로 된 리스트 선언 방법1 . a=[&#39;s&#39;,&#39;e&#39;,&#39;o&#39;,&#39;k&#39;,&#39;j&#39;,&#39;i&#39;,&#39;n&#39;] a . [&#39;s&#39;, &#39;e&#39;, &#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;] . 문자로 된 리스트 선언 방법2 . a=&#39;seokjin&#39; #string으로 된 a를 선언 a=list(a) #list(a)를 통해 str을 list로 변환 -&gt; 그 결과를 다시 a에 저장 a . [&#39;s&#39;, &#39;e&#39;, &#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;] . 첫번째 원소를 삭제하고 싶다면? . del a[0] . a . [&#39;e&#39;, &#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;] . 이상태에서 다시 첫번째 원소를 삭제하면? . del a[0] a . [&#39;o&#39;, &#39;k&#39;, &#39;j&#39;, &#39;i&#39;, &#39;n&#39;] . - 리스트의 원소 추가 . (예제) 비어있는 리스트를 만들고 원소 0,1,2를 차례로 추가 . (풀이1) . a=[] a . [] . a=a+[0] a . [0] . a=a+[1] a . [0, 1] . a=a+[2] a . [0, 1, 2] . (풀이2) . a=[] a . [] . a+=[0] a . [0] . a+=[1] a . [0, 1] . a+=[2] a . [0, 1, 2] . (풀이3) 리스트 특화기능(=메소드)를 이용 . a=[] a . [] . a.append(0) a . [0] . a.append(1) a . [0, 1] . a.append(2) a . [0, 1, 2] . a+[4] 와 a.append(4)의 차이점? | . a=[1,2,3] a+[4] . [1, 2, 3, 4] . a ##a의 연산결과는 그대로. 변화 없음 . [1, 2, 3] . a=[1,2,3] a.append(4) . a ##a자체가 변화함 . [1, 2, 3, 4] . a.append(4) : a에 4를 append하라 -&gt; a가 변함 . a+[4]: a와 4를 연산하라 . &#47700;&#49548;&#46300; (&#47532;&#49828;&#53944; &#51088;&#47308;&#54805;&#50640; &#53945;&#54868;&#46108; &#53945;&#49688;&#54620; &#54632;&#49688;&#46308;) . (append) . a=[1,2,3,4] a.append? . Signature: a.append(object, /) Docstring: Append object to the end of the list. Type: builtin_function_or_method . a.append(5) a . [1, 2, 3, 4, 5] . (clear) . a.clear? . Signature: a.clear() Docstring: Remove all items from list. Type: builtin_function_or_method . a.clear() a . [] . (count) . a=[1,1,1,1,2,3,2,3,4,3,4,4] a.count? . Signature: a.count(value, /) Docstring: Return number of occurrences of value. Type: builtin_function_or_method . a.count(1) . 4 . a.count(2) . 2 . a.count(3) . 3 . a.count(4) . 3 . (extend) . a=[1,2,3,4] b=[-1,-2,-3,-4] . a.extend(b) #extend는 원소들이 자체적으로 추가 a . [1, 2, 3, 4, -1, -2, -3, -4] . a.append(b) #append는 b의 형태변환없이 그 자체가 추가 a . [1, 2, 3, 4, -1, -2, -3, -4, [-1, -2, -3, -4]] . (index) . a=[11,22,True,&#39;a&#39;,22,&#39;a&#39;] a.index? . Signature: a.index(value, start=0, stop=9223372036854775807, /) Docstring: Return first index of value. Raises ValueError if the value is not present. Type: builtin_function_or_method . a.index(11) . 0 . a.index(22) . 1 . a.index(&#39;a&#39;) . 3 . (insert) . a=[1,2,3] a.insert? . Signature: a.insert(index, object, /) Docstring: Insert object before index. Type: builtin_function_or_method . a.insert(1,77) a . [1, 77, 2, 3] . (pop) . a=[&#39;a&#39;,1,2,&#39;b&#39;] a.pop? . Signature: a.pop(index=-1, /) Docstring: Remove and return item at index (default last). Raises IndexError if list is empty or index is out of range. Type: builtin_function_or_method . a.pop() . &#39;b&#39; . a . [&#39;a&#39;, 1, 2] . a.pop(0) . &#39;a&#39; . a . [1, 2] . (remove) . a=[&#39;a&#39;,1,2,&#39;b&#39;] a.remove? . Signature: a.remove(value, /) Docstring: Remove first occurrence of value. Raises ValueError if the value is not present. Type: builtin_function_or_method . a.remove(&#39;b&#39;) . a . [&#39;a&#39;, 1, 2] . (reverse) . a=[1,2,3,4] a.reverse? . Signature: a.reverse() Docstring: Reverse *IN PLACE*. Type: builtin_function_or_method . a.reverse() a . [4, 3, 2, 1] . (sort) . a=[1,3,2,4] a.sort? . Signature: a.sort(*, key=None, reverse=False) Docstring: Sort the list in ascending order and return None. The sort is in-place (i.e. the list itself is modified) and stable (i.e. the order of two equal elements is maintained). If a key function is given, apply it once to each list item and sort them, ascending or descending, according to their function values. The reverse flag can be set to sort in descending order. Type: builtin_function_or_method . a.sort() a . [1, 2, 3, 4] . &#51473;&#52393;&#47532;&#49828;&#53944; . A=[[1,2,3],[4,5,6],[7,8,9]] A . [[1, 2, 3], [4, 5, 6], [7, 8, 9]] . A는 매트릭스 형태라고 이해할 수 있다. . A에서 (2,1)의 원소 =4 를 뽑고 싶다 . A[1,0] . TypeError Traceback (most recent call last) Input In [119], in &lt;cell line: 1&gt;() -&gt; 1 A[1,0] TypeError: list indices must be integers or slices, not tuple . A[1][0] . 4 . - 매트릭스는 아니지만, 매트릭스 같음! . 1차원 배열을 다차원 배열로 확장할 수 있는 기본 아이디어를 제공함 | . &#47532;&#49828;&#53944; &#52980;&#54532;&#47532;&#54760;&#49496; ($ star star star $) . - for문 예비학습 . 프로그램안에서 반복해서 무언가를 하고 싶을 경우 $ to $ for . for i in [0,1,2,3]: ## 반복실행계획 print(i) ## 반복실행할내용, 탭을이용해 들여쓰기 . 0 1 2 3 . - 예제 : $2^0,2^1,2^2,2^3$ 을 원소로 가지는 리스트 생성 . (풀이1) 직접입력 . x=[2**0,2**1,2**2,2**3] x . [1, 2, 4, 8] . (풀이2) for문을 이용 . x=[] for i in [0,1,2,3]: x.append(2**i) . x . [1, 2, 4, 8] . (풀이3) for문을 이용 . x=[] for i in [0,1,2,3]: x+=[2**i] . x . [1, 2, 4, 8] . (풀이4) 리스트컴프리헨션을 이용 . x=[2**i for i in [0,1,2,3]] x . [1, 2, 4, 8] . - 리스트컴프리헨션의 문법 암기방법 . 집합에서 조건제시법을 연상 | . - 리스트컴프리헨션이란? . 리스트를 매우 효율적으로 만드는 테크닉 | for문에 비해 좋은 점: (1) 코드가 간결 (2) 빠름 | . - 예제: 리스트컴프리헨션을 이용해 통계1,통계2, ....., 수학4,수학5를 만들기 . (풀이) . [x+y for x in [&#39;stat&#39;,&#39;math&#39;] for y in &#39;12345&#39;] . [&#39;stat1&#39;, &#39;stat2&#39;, &#39;stat3&#39;, &#39;stat4&#39;, &#39;stat5&#39;, &#39;math1&#39;, &#39;math2&#39;, &#39;math3&#39;, &#39;math4&#39;, &#39;math5&#39;] . $ {xy : x in {stat,math }, y in {1,2,3,4,5 } }$ | . - x에 무엇이 들어 있을까?? / 전역변수, 지역변수/ . (경우1) . x=1 lst=[] for x in &#39;jbnu&#39;: lst=lst+[x] lst . [&#39;j&#39;, &#39;b&#39;, &#39;n&#39;, &#39;u&#39;] . x #for문에서 반복되고 마지막 원소인 u가 들어가 있음. . &#39;u&#39; . (경우2) . x=1 lst =[x for x in &#39;jbnu&#39;] lst . [&#39;j&#39;, &#39;b&#39;, &#39;n&#39;, &#39;u&#39;] . x . 1 . - 예비학습 : range() . list(range(0,10)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . list(range(1,10,2)) . [1, 3, 5, 7, 9] . [&#39;X&#39;+str(i) for i in range(1,10)] . [&#39;X1&#39;, &#39;X2&#39;, &#39;X3&#39;, &#39;X4&#39;, &#39;X5&#39;, &#39;X6&#39;, &#39;X7&#39;, &#39;X8&#39;, &#39;X9&#39;] .",
            "url": "https://sjinc.github.io/SeokJInChoi/python/2022/06/24/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%B3%B5%EC%8A%B5.html",
            "relUrl": "/python/2022/06/24/%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8A%E1%85%A5%E1%86%AB-%E1%84%87%E1%85%A9%E1%86%A8%E1%84%89%E1%85%B3%E1%86%B8.html",
            "date": " • Jun 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sjinc.github.io/SeokJInChoi/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sjinc.github.io/SeokJInChoi/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "프로젝트 . 수상내역 . 대외활동 . ’-‘ 2019 삼성 SDS 멘토링 프로그램 참가(6월,11월) . ’-‘ 2019 DB기업경영캠프 (2019.8.26 ~ 2019.8.28) . ’-‘ 2019 대학교 해외봉사 활동 (라오스 / 2020.1.6 ~ 2020.1.20) . 프로그래밍 스킬 . ’-‘ Python . ’-‘ C . ’-‘ R .",
          "url": "https://sjinc.github.io/SeokJInChoi/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sjinc.github.io/SeokJInChoi/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}