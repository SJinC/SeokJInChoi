{
  
    
        "post0": {
            "title": "파이썬 3월 16일 강의 복습",
            "content": "&#53916;&#54540;, &#53916;&#54540;&#44256;&#44553; . june 26 ,2022 | . &#53916;&#54540; . 리스트 vs 튜플 . - 컨테이너형타입이라는 점, 그리고 연산 및 인덱싱을 하는 방법은 리스트와 같음 . 차이점1 : [] 대신 ()를 사용한다. | 차이점2 : 불변형이다. (원소의 값을 바꿀 수 없음) | 차이점3 : 하나의 원소를 선언할 때는 (1,)과 같이 해야 한다. | 차이점4 : 의미가 명확할 때는 튜플의 ()를 생략가능하다. | . 컨테이너형이라는 것이 무슨 의미? . a=(4,5.6,&#39;pencil&#39;,2.4+5.7j,[5,7]) . type(a[3]) . complex . - 불변형이라는 것은 무슨 의미? . a[2]=&#39;Pencil&#39; . TypeError Traceback (most recent call last) Input In [3], in &lt;cell line: 1&gt;() -&gt; 1 a[2]=&#39;Pencil&#39; TypeError: &#39;tuple&#39; object does not support item assignment . cf) a를 튜플이 아니라 리스트로 선언하면 값이 잘 바뀜 . a=[4,5.6,&#39;pencil&#39;,2.4+5.7j,[5,7]] . a[2] . &#39;pencil&#39; . a[2]=&#39;Pencil&#39; . a . [4, 5.6, &#39;Pencil&#39;, (2.4+5.7j), [5, 7]] . - 하나의 원소로 이루어진 튜플을 만들 때는 쉼표를 붙여야 함 . [1]+[2,3,4] . [1, 2, 3, 4] . (1,)+(2,3,4) . (1, 2, 3, 4) . - 의미가 명확할 때 튜플의 괄호는 생략가능하다! (중요) . a=1,2 a . (1, 2) . 의미가 명확할 때 생략해야 함 . 1,2+3,4,5 . (1, 5, 4, 5) . (1,2)+(3,4,5) . (1, 2, 3, 4, 5) . 선언 . - 소괄호를 이용 . a=(1,2,3) a . (1, 2, 3) . type(a) . tuple . - 생략가능하다는 점이 포인트 . a=1,2,3 a . (1, 2, 3) . type(a) . tuple . - 원소가 하나인 튜플을 만들고 싶다면? . a=(1,) a . (1,) . &#50672;&#49328; . - 리스트와 동일 . (1,2)+(3,4,5) . (1, 2, 3, 4, 5) . (1,2)*3 . (1, 2, 1, 2, 1, 2) . &#51064;&#45937;&#49905; . - 리스트와 동일 . a=(1,2,3,-4,-5) a . (1, 2, 3, -4, -5) . a[-1] . -5 . a[-3:] . (3, -4, -5) . &#53916;&#54540;&#44256;&#44553; . 튜플을 왜 불변형으로 만들었을까? . 책의 설명 : 실수로 값을 변경할 수 있도록 방지할 수 있다. | shallow copy / deep copy 를 막을 수 있는 무기 | . 튜플을 슬기롭게 사용하는 방법 ($ star star star star star $) . - 여러변수를 동시에 출력하고 싶은 경우 (다중출력?) . a=1 b=2 c=3 . 선언된 값을 확인 하려면? . a . 1 . b . 2 . c . 3 . 튜플을 이용하면? . a,b,c #괄호를 생략할 수 있으니 . (1, 2, 3) . - 예제 : 다중할당1 (여러개의 변수를 동시에 선언하고 싶을 경우) . name,age,sex,height,weight= &#39;Tom&#39;,28,&#39;M&#39;,180,80 . name,age,sex,height,weight . (&#39;Tom&#39;, 28, &#39;M&#39;, 180, 80) . height . 180 . - 예제 : 다중할당2, 위도와 경도 . coor = (37,127) coor . (37, 127) . lat,long=coor . lat . 37 . long . 127 . 튜플을 사용하면 가독성이 극대화 (그래서 다중할당은 거의 튜플과 세트로 사용함) . x,y,z=1,2,3 x,y,z . (1, 2, 3) . x,y=&#39;hi&#39; x,y . (&#39;h&#39;, &#39;i&#39;) . - 예제 : 임시변수 사용없이 두 변수의 값을 교환 . a=10 b=20 . a,b=b,a . a . 20 . b . 10 . - 예제 : for문과 튜플 . lst=[[&#39;seokjin&#39;,201922046,&#39;M&#39;], [&#39;iu&#39;,202112355,&#39;F&#39;], [&#39;chaeng&#39;,&#39;202115791&#39;,&#39;F&#39;]] lst . [[&#39;seokjin&#39;, 201922046, &#39;M&#39;], [&#39;iu&#39;, 202112355, &#39;F&#39;], [&#39;chaeng&#39;, &#39;202115791&#39;, &#39;F&#39;]] . for i in lst: print(i) . [&#39;seokjin&#39;, 201922046, &#39;M&#39;] [&#39;iu&#39;, 202112355, &#39;F&#39;] [&#39;chaeng&#39;, &#39;202115791&#39;, &#39;F&#39;] . for name,studentid,sex in lst: print(name) . seokjin iu chaeng . for name,studentid,sex in lst: print(name,studentid) . seokjin 201922046 iu 202112355 chaeng 202115791 . - 예제:for문과 튜플, dummy variabele_ . for name, studentid,sex in lst: print(studentid) . 201922046 202112355 202115791 . for _,studentid,_ in lst: print(studentid) . 201922046 202112355 202115791 . for name,_,sex in lst: print(name,sex) . seokjin M iu F chaeng F . for name,*args in lst: print(name) . seokjin iu chaeng . - 튜플과 언패킹 연산자 * . head,body,*tail=range(1,11) head,body,tail . (1, 2, [3, 4, 5, 6, 7, 8, 9, 10]) . head1,head2,*body,tail1,tail2,tail3=range(1,11) head1,head2,body,tail1,tail2,tail3 . (1, 2, [3, 4, 5, 6, 7], 8, 9, 10) . *head,body,tail=range(1,11) head,body,tail . ([1, 2, 3, 4, 5, 6, 7, 8], 9, 10) . * 를 붙이면 1차원 자료구조가 풀린다..?? . print([1,2,3]) . [1, 2, 3] . print(*[1,2,3]) . 1 2 3 . - 예제: 함수의 입력으로 *args를 넣을때 . [예비학습] 함수 벼락치기 . def myadd(a,b): return a+b . myadd(-3,3) . 0 . 예제: 두점 사이의 거리를 구하는 함수를 만들자 . 점 $p=(p_x,p_y)$와 $q=(q_x,q_y)$의 거리는 $ sqrt{(p_x-q_x)^2+(p_y-q_y)^2}$이다. 이것을 계산하는 프로그램을 만들자. . import numpy as np def dist(px,py,qx,qy): return np.sqrt((px-qx)**2 + (py-qy)**2) . p=(0,3) q=(4,0) dist(p,q) . TypeError Traceback (most recent call last) Input In [70], in &lt;cell line: 3&gt;() 1 p=(0,3) 2 q=(4,0) -&gt; 3 dist(p,q) TypeError: dist() missing 2 required positional arguments: &#39;qx&#39; and &#39;qy&#39; . (방법1) . px,py=(0,3) qx,qy=(4,0) dist(px,py,qx,qy) . 5.0 . (방법2) . def dist2(p,q): px,py=p qx,qy=q return np.sqrt((px-qx)**2 + (py-qy)**2) . p=(0,3) q=(4,0) dist2(p,q) . 5.0 . (방법3) . dist(*p,*q) . 5.0 . dist(px,py,qx,qy) . 5.0 .",
            "url": "https://sjinc.github.io/SeokJInChoi/python/2022/06/25/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%B3%B5%EC%8A%B5.html",
            "relUrl": "/python/2022/06/25/%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8A%E1%85%A5%E1%86%AB-%E1%84%87%E1%85%A9%E1%86%A8%E1%84%89%E1%85%B3%E1%86%B8.html",
            "date": " • Jun 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sjinc.github.io/SeokJInChoi/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sjinc.github.io/SeokJInChoi/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "프로젝트 . 수상내역 . 대외활동 . ’-‘ 2019 삼성 SDS 멘토링 프로그램 참가(6월,11월) . ’-‘ 2019 DB기업경영캠프 (2019.8.26 ~ 2019.8.28) . ’-‘ 2019 대학교 해외봉사 활동 (라오스 / 2020.1.6 ~ 2020.1.20) . 프로그래밍 스킬 . ’-‘ Python . ’-‘ C . ’-‘ R .",
          "url": "https://sjinc.github.io/SeokJInChoi/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sjinc.github.io/SeokJInChoi/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}